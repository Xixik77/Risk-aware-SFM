function simulate_sfm_with_decision()
% SIMULATE_SFM_WITH_DECISION
%   Generalized simulation framework for pedestrian-vehicle interactions
%   using Social Force Model (SFM) and decision module.

clc; clear; close all;
global field_judge mi time timestep numtimesteps;

%% ==== Load Simulation Data ====
load('data/pedestrian_data.mat');
load('data/ped_vdata.mat');
load('data/pedestrian_expect_v.mat');
load('data/vehicle1_data.mat');
load('data/vehicle2_data.mat');

params = get_simulation_parameters();
[roomWidth, roomHeight, wallpoints, obs] = ...
    deal(params.roomWidth, params.roomHeight, params.wallpoints, params.obs);

%% ==== Setup Obstacle Field ====
field_judge = zeros(25, 27);
[X, Y] = meshgrid(1:27, 1:25);
for j = 1:length(obs)
    field_judge(inpolygon(X(:), Y(:), obs{j}(:,1), obs{j}(:,2))) = 1;
end

%% ==== Simulation Configuration ====
mi = 58;
time = times / 24; 
timestep = 1 / 24;
numtimesteps = round(time / timestep);
numpeds = size(pedestrian, 1);

p_start = pedestrian(:, 1:2);
p_goal = pedestrian(:, 3:4);
ped_v = ped_velocity;
expect_v = pedestrian_expect_velocity;

%% ==== Vehicle Setup ====
vehicle_paths = {vehicle1_position_data, vehicle2_position_data};
num_vehicles = length(vehicle_paths);
vehicle_positions_record = cell(num_vehicles, 1);
vehicle_velocities_record = cell(num_vehicles, 1);
vehicle_current_positions = zeros(num_vehicles, 2);
vehicle_velocities = zeros(num_vehicles, 2);
for v = 1:num_vehicles
    vehicle_positions_record{v} = zeros(numtimesteps, 2);
    vehicle_velocities_record{v} = zeros(numtimesteps, 2);
end

%% ==== Recording Structures ====
nodes_record = zeros(numtimesteps, numpeds, 2);
p_v_record = zeros(numtimesteps, numpeds);
socialforce = zeros(numpeds, 2);
nextnodes = zeros(numpeds, 2);
PET = zeros(numtimesteps, numpeds, num_vehicles);

%% ==== Simulation Loop ====
for t = 1:numtimesteps
    % Update vehicle positions and velocities
    for v = 1:num_vehicles
        v_path = vehicle_paths{v};
        if t < vehicle_time_index(v)
            vehicle_current_positions(v, :) = v_path(1, :);
            vehicle_velocities(v, :) = [0, 0];
        elseif t <= vehicle_time_end(v)
            idx = t - vehicle_time_index(v) + 1;
            vehicle_current_positions(v, :) = v_path(idx, :);
            if t > 1
                prev = vehicle_positions_record{v}(t-1, :);
                vehicle_velocities(v, :) = (vehicle_current_positions(v, :) - prev) / timestep;
            end
        else
            vehicle_current_positions(v, :) = v_path(end, :);
            vehicle_velocities(v, :) = [0, 0];
        end
        vehicle_positions_record{v}(t, :) = vehicle_current_positions(v, :);
        vehicle_velocities_record{v}(t, :) = vehicle_velocities(v, :);
    end

    % Simulation for each pedestrian
    for i = 1:numpeds
        i_pos = p_start(i, :);
        i_vel = ped_v(i, :);

        if norm(p_goal(i, :) - i_pos) < 0.2
            ped_v(i, :) = [0, 0];
            nextnodes(i, :) = p_goal(i, :);
            nodes_record(t, i, :) = p_goal(i, :);
            continue;
        end

        path = Astar(i_pos, p_goal(i, :), field_judge);
        state = 0;
        if ~isempty(path{1})
            next_path = path{1};
            if size(next_path, 1) > 1
                next_position = next_path(2, :);
                state = 1;
            else
                next_position = next_path(1, :);
                state = 2;
            end
        end
        if state == 0
            sfm = [0, 0];
        else
            sfm_goal = p_goal(i, :);
            [sfm_force, self_force, vehicle_force] = social_force_model_modify(i_pos, i_vel, wallpoints, ped_v, p_start, sfm_goal, expect_v(i,:), vehicle_current_positions(1,:), vehicle_current_positions(2,:), vehicle_velocities(1,:), vehicle_velocities(2,:), 1, 1, 2000, 0.08, 3000, 0.12, 1.0, 0.4);
            sfm = sfm_force;
        end
        socialforce(i, :) = sfm;

        %% === Decision Model Integration ===
        distance_p_av1 = norm(vehicle_current_positions(1, :) - i_pos);
        distance_p_av2 = norm(vehicle_current_positions(2, :) - i_pos);
        if distance_p_av1 > distance_p_av2
            vehicle_current_position = vehicle_current_positions(2, :);
            vehicle_velocity = vehicle_velocities(2, :);
            vehicle_index = 2;
        else
            vehicle_current_position = vehicle_current_positions(1, :);
            vehicle_velocity = vehicle_velocities(1, :);
            vehicle_index = 1;
        end

        [~, vehicle_current_virtualpoints] = vehicle_points_decision(vehicle_current_position, vehicle_velocity);

        if inpolygon(i_pos(1), i_pos(2), vehicle_current_virtualpoints(:,1), vehicle_current_virtualpoints(:,2))
            if vehicle_index == 1
                if t < vehicle_time_index(1) || t > 163
                    vehicle_velocity = [0, 0];
                else
                    vehicle_velocity = (vehicle_current_position - vehicle_paths{1}(t-1, :)) / timestep;
                end
            else
                if t < vehicle_time_index(2) || t > 235
                    vehicle_velocity = [0, 0];
                else
                    vehicle_velocity = (vehicle_current_position - vehicle_paths{2}(t-1, :)) / timestep;
                end
            end

            if ~isequal(ped_v(i,:), [0,0]) && ~isequal(vehicle_velocity, [0,0])
                decision = decision_model2(ped_v(i,:), i_pos, vehicle_current_position, vehicle_velocity);
                                      if decision == 'A'
                            % Strong deceleration: scale negative along pedestrian's moving direction
                            sfm_direction = ped_v(i,:) / (norm(ped_v(i,:)) + 1e-6);
                            socialforce(i, :) = norm(vehicleforce) * sfm_direction * -0.035;

                        elseif decision == 'B'
                            % Mild deceleration
                            sfm_direction = ped_v(i,:) / (norm(ped_v(i,:)) + 1e-6);
                            socialforce(i, :) = norm(vehicleforce) * sfm_direction * -0.012;

                        elseif decision == 'C'
                            % Strong acceleration
                            sfm_direction = ped_v(i,:) / (norm(ped_v(i,:)) + 1e-6);
                            socialforce(i, :) = norm(selfforce) * sfm_direction * 0.4;

                        elseif decision == 'D'
                            % Mild acceleration
                            sfm_direction = ped_v(i,:) / (norm(ped_v(i,:)) + 1e-6);
                            socialforce(i, :) = norm(vselfforce) * sfm_direction * 0.2;

                        elseif decision == 'E'
                            % Social force model unchanged
                            socialforce(i, :) = socialforce(i, :);

                        elseif decision == 'F'
                            % Evasive turning: rotate current pedestrian direction by pi/6
                            ped_direction = ped_v(i,:) / (norm(ped_v(i,:)) + 1e-6);
                            rotation_angle = pi / 6;  % 30 degrees rotation

                            % Compute perpendicular vector (clockwise rotation)
                            rotation_matrix = [cos(rotation_angle), -sin(rotation_angle); 
                                               sin(rotation_angle),  cos(rotation_angle)];
                            new_direction = (rotation_matrix * ped_direction')';

                            socialforce(i, :) = norm(socialforce(i,:)) * new_direction;

                        elseif decision == 'G'
                            % Hesitation module force adjustment
                            [hesitate_force, hesitate_state] = hesitate_model(vehicle_current_position, vehicle_velocity, i_position, ped_v(i,:));

                            if hesitate_state == 1
                                % Accelerate forward
                                socialforce(i, :) = hesitate_force;
                            else
                                % Decelerate: apply negative of current direction
                                reverse_dir = -ped_v(i,:) / (norm(ped_v(i,:)) + 1e-6);
                                socialforce(i, :) = norm(hesitate_force) * reverse_dir;
                            end

                        elseif decision == 'H'
                            % Stop moving
                            socialforce(i, :) = [0, 0];
                        end
            end
        end

        % Update velocity and position
        new_vel = ped_v(i, :) + (socialforce(i, :) / mi) * timestep;
        if norm(new_vel) > 2.0
            new_vel = new_vel / norm(new_vel) * 2.0;
        end
        ped_v(i, :) = new_vel;
        nextnodes(i, :) = i_pos + new_vel * timestep;
        p_start(i, :) = nextnodes(i, :);

        % Record
        nodes_record(t, i, :) = nextnodes(i, :);
        p_v_record(t, i) = norm(new_vel);

        for v = 1:num_vehicles
            PET(t, i, v) = calculate_PET(vehicle_current_positions(v, :), vehicle_velocities(v, :), i_pos, i_vel);
        end
    end
end
end
